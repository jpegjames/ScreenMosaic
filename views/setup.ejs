<!DOCTYPE html>
<html>
  <head>
    <title>Screen Setup</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />

    <link href="/stylesheets/tailwind.min.css" rel="stylesheet">

    <script src="/javascripts/jquery.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
      var socket = io();
    </script>
    <script src="/javascripts/admin.js"></script>

    <style media="screen">

      .flex-container {
        display: flex;
      }

      .flex-item {
        width: 50%;
      }

      .move-inputs-container {
        width: 150px;
        float: left;
      }
      .move-buttons-container {
        width: 80px;
        text-align: center;
        float: left;
      }

      label {
        display: block;
      }

    </style>
  </head>

  <body>

    <div class="sm:block md:flex bg-grey-lighter">
      <div class="flex-1 bg-grey-light px-4 py-2 m-2">
        <h2 class="mb-4">Screen Controls</h2>
        <button class="my-2 w-48 bg-transparent hover:bg-red text-red-dark hover:text-white py-2 px-4 border border-red hover:border-transparent rounded focus:outline-none focus:shadow-outline" id="refresh-btn">Refresh All</button><br>

        <button class="my-2 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-r-none focus:outline-none focus:shadow-outline" id="show-token-btn">Show Tokens</button>
        <button class="my-2 -ml-1 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-l-none focus:outline-none focus:shadow-outline" id="hide-token-btn">Hide Tokens</button><br>

        <button class="my-2 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-r-none focus:outline-none focus:shadow-outline" id="mute-btn">Mute</button>
        <button class="my-2 -ml-1 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-l-none focus:outline-none focus:shadow-outline" id="unmute-btn">Unmute</button><br>

        <button class="my-2 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-r-none focus:outline-none focus:shadow-outline" id="show-grid-btn">Show Grid</button>
        <button class="my-2 -ml-1 w-48 bg-transparent hover:bg-blue text-blue-dark hover:text-white py-2 px-4 border border-blue hover:border-transparent rounded rounded-l-none focus:outline-none focus:shadow-outline" id="hide-grid-btn">Hide Grid</button>

      </div>

      <div class="flex-1 bg-grey-light px-4 py-2 m-2">
        <h2 class="mb-4">Screen Position</h2>

        <label class="block tracking-wide text-xs font-bold mt-4 mb-2" for="screenTokenSelect">
          Screen
        </label>
        <div class="inline-block relative w-64">
          <select id="screenTokenSelect" name="screenTokenSelect" class="block appearance-none w-full bg-white border border-grey-light hover:border-grey px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:shadow-outline">
            <option value=""></option>
            <% for(var i=0; i < screensJSON.length; i++) { %>
              <option value="<%= screensJSON[i].token %>"><%= screensJSON[i].id %> | <%= screensJSON[i].token %></option>
            <% } %>
          </select>
          <div class="pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker">
            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
          </div>
        </div>

        <div class="flex flex-wrap -mx-3 mb-2">
          <div class="w-1/3 px-3 mb-6 md:mb-0">
            <label class="block tracking-wide text-xs font-bold mt-4 mb-2" for="screen-top-value">
              Top
            </label>
            <div class="relative">
              <input class="appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-grey" id="screen-top-value" type="text" placeholder="--">
              <div class="pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey">
                px
              </div>
            </div>
            <div class="mt-2">
              <button class="border w-8 h-8 border-grey rounded" id="move-screen-up">⬆</button>
              <button class="border w-8 h-8 border-grey rounded" id="move-screen-down">⬇</button>
            </div>
          </div>

          <div class="w-1/3 px-3 mb-6 md:mb-0">
            <label class="block tracking-wide text-xs font-bold mt-4 mb-2" for="screen-left-value">
              Left
            </label>

            <div class="relative">
              <input class="appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-grey" id="screen-left-value" type="text" placeholder="--">
              <div class="pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey">
                px
              </div>
            </div>
            <div class="mt-2">
              <button class="border w-8 h-8 border-grey rounded" id="move-screen-left">⬅</button>
              <button class="border w-8 h-8 border-grey rounded" id="move-screen-right">➡</button><br>
            </div>
          </div>

          <div class="w-1/3 px-3 mb-6 md:mb-0">
            <label class="block tracking-wide text-xs font-bold mt-4 mb-2" for="screen-scale-value">
              Scale
            </label>
            <input class="appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-grey" id="screen-scale-value" type="text" placeholder="--">
          </div>
        </div>


        <div class="class flex flex-wrap -mx-3 mb-2">

        </div>


      </div>
    </div>





    <script type="text/javascript">
      $('#refresh-btn').click(refreshScreens);
      $('#show-token-btn').click(showTokens);
      $('#hide-token-btn').click(hideTokens);
      $('#mute-btn').click(muteScreens);
      $('#unmute-btn').click(unmuteScreens);
      $('#show-grid-btn').click(showGrid);
      $('#hide-grid-btn').click(hideGrid);




      // testing CSS setup
      var screensJSON = <%- JSON.stringify(screensJSON) %>;
      var currentScreen = screensJSON[4];

      // change screen
      $('#screenTokenSelect').on('change', function() {
        currentScreen = screensJSON.filter((s) => {
          return s.token == $(this).val();
        })[0]

        updateViewPositionValues();
      })


      $('#screen-top-value').on('change', function() {
        currentScreen["top"] = Number($(this).val());
        sendScreenPositionUpdate();
      })
      $('#screen-left-value').on('change', function() {
        currentScreen["left"] = Number($(this).val());
        sendScreenPositionUpdate();
      })
      $('#screen-scale-value').on('change', function() {
        currentScreen["scale"] = Number($(this).val());
        sendScreenPositionUpdate();
      })


      // $('#move-screen-up').on('click', function() {
      //   currentScreen["top"] += 10;
      //   updateViewPositionValues();
      //   sendScreenPositionUpdate();
      // })
      // $('#move-screen-down').on('click', function() {
      //   moveScreenDown();
      // })
      // $('#move-screen-left').on('click', function() {
      //   currentScreen["left"] += 10;
      //   updateViewPositionValues();
      //   sendScreenPositionUpdate();
      // })
      // $('#move-screen-right').on('click', function() {
      //   currentScreen["left"] -= 10;
      //   updateViewPositionValues();
      //   sendScreenPositionUpdate();
      // })

      $('#scale-screen-up').on('click', function() {
        currentScreen["scale"] += 0.1;
        updateViewPositionValues();
        sendScreenPositionUpdate();
      })

      $('#scale-screen-down').on('click', function() {
        currentScreen["scale"] -= 0.05;
        updateViewPositionValues();
        sendScreenPositionUpdate();
      })


      function updateViewPositionValues() {
        $('#screen-top-value').val(currentScreen["top"]);
        $('#screen-left-value').val(currentScreen["left"]);
        $('#screen-scale-value').val(currentScreen["scale"]);
      }

      function moveScreenDown() {
        currentScreen["top"] -= 5;
        console.log(currentScreen["top"]);
        updateViewPositionValues();
        sendScreenPositionUpdate();
      }

      function moveScreenUp() {
        currentScreen["top"] += 5;
        console.log(currentScreen["top"]);
        updateViewPositionValues();
        sendScreenPositionUpdate();
      }

      function moveScreenLeft() {
        currentScreen["left"] += 5;
        console.log(currentScreen["top"]);
        updateViewPositionValues();
        sendScreenPositionUpdate();
      }

      function moveScreenRight() {
        currentScreen["left"] -= 5;
        console.log(currentScreen["top"]);
        updateViewPositionValues();
        sendScreenPositionUpdate();
      }



      // https://stackoverflow.com/questions/79816/need-javascript-code-for-button-press-and-hold
      holdit(document.getElementById('move-screen-down'), moveScreenDown);
      holdit(document.getElementById('move-screen-up'), moveScreenUp);
      holdit(document.getElementById('move-screen-left'), moveScreenLeft);
      holdit(document.getElementById('move-screen-right'), moveScreenRight);

      // possibly better option:
      // https://stackoverflow.com/questions/4080497/how-can-i-listen-for-a-click-and-hold-in-jquery


      // testing
      function holdit(btn, action) {
        var t;
        var initialStart = 500;
        var start = initialStart;

        var repeat = function () {
          action();
          t = setTimeout(repeat, start);
          start = Math.max(0.25, start / 2);
          console.log(start);
        }

        btn.onmousedown = function() {
          repeat();
        }

        btn.onmouseup = function () {
          clearTimeout(t);
          start = initialStart;
        }

        btn.onmouseout = function () {
          clearTimeout(t);
          start = initialStart;
        }
      };


    </script>





  </body>
</html>
