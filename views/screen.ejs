<!DOCTYPE html>
<html>
  <head>
    <title>ScreenTile <%= screenData === undefined ? '' : ': ' + screenData.id %></title>
    <meta name="viewport" content="<%= viewport %>" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/screen.js"></script>
    <script src="/javascripts/jss.min.js"></script>

    <style media="screen">
      html, body {
        margin: 0;
        height: 100%;
        width: 100%;
        font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
      }
      body {
        /* default background */
        /* background: url('https://www.toptal.com/designers/subtlepatterns/images/transp_bg.png'); */
        background: #ccc;
      }

      #render {
        height: 100%;
        width: 100%;
        overflow: hidden;
      }

      #render .media {
        position: relative;
      }

      section#token-container {
        height: 100%;
        width: 100%;
        text-align: center;
        padding-top: 200px;
        position: absolute;
        top: 0;
        left: 0;
        font-size: 30px;
        text-shadow: 2px 0 0 #fff, 0 -2px 0 #fff, 0 2px 0 #fff, -2px 0 0 #fff;
        box-sizing: border-box;
      }

      section#token-container .token {
        font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
        font-size: 60px;
        font-weight: bold;
      }

      #grid {
        background-image: url("/images/grid-overlay-x.png"), url("/images/grid-overlay-y.png"), url("/images/grid-pattern.png");
        position: absolute;
        right: 0;
        bottom: 0;
        display: none;
      }

      #video {
        height: 100%;
        width: 100%;
        /* object-fit: cover; */
      }

      #iframe {
        height: 100%;
        width: 100%;
      }

      .offset {
        top: -<%= (screenData === undefined) ? 0 : screenData.top %>px;
        left: -<%= (screenData === undefined) ? 0 : screenData.left %>px;
      }
    </style>

    <!-- gallery specific -->
    <style media="screen">
      body {
        background: #000;
      }
      #pixel-container {
        overflow: auto;
        /* filter: blur(1px); */
        position: absolute;
        top: 0;
      }
      #pixel-template {
        display: none;
      }
      .pixel {
        float: left;
        /* border: 1px solid #333; */
        border-bottom: 1px solid #333;
        overflow: hidden;
        position: relative;

        /* filter: blur(1px) brightness(1.5); */
      }
      .pixel div {
        height: 100%;
        width: 33%;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        /* transition: 200ms all; */
        /* border-radius: 50%; */
      }
      .pixel .red {
        background: #ff0000;
        left: 0;
      }
      .pixel .green {
        background: #00ff00;
        left: 33%;
      }
      .pixel .blue {
        background: #0000ff;
        left: 66%;
        width: 34%;
      }

      #color-swatch {
        height: 40px;
        width: 40px;
        margin-top: 20px;
        /* border: 1px solid #ccc; */
      }

      .bold-type {
        position: absolute;
        width: 100%;
        top: 100px;
        text-align: center;
        font-size: 160px;
        font-family: arial;
        font-weight: bold;
        z-index: 10;
        color: #fff;
        text-shadow: 6px 6px #000;
      }
    </style>
  </head>

  <body>

    <section id="render">
      <div id="grid" class="offset"></div>

      <!-- https://webkit.org/blog/6784/new-video-policies-for-ios/ -->
      <!-- Webkit / iOS 10+: <video muted> elements will also be allowed to autoplay without a user gesture. -->
      <!-- test source: https://www.w3schools.com/html/mov_bbb.mp4 -->
      <video id="video" autoplay playsinline muted style="display: none;"></video>

      <iframe id="iframe" src="" style="display: none;"></iframe>

      <img id="image" src="" class="media offset">

      <div id="pixel-container">
        <div class="pixel" id="pixel-template">
          <div class="red"></div>
          <div class="green"></div>
          <div class="blue"></div>
        </div>
      </div>
    </section>


    <section id="token-container" style="<%= (screenData === undefined) ? 'display: block;' : 'display: none;' %>">
      <% if (screenData === undefined) { %>
        <div class="message">Screen not yet defined in `screens.json`</div>
      <% } else { %>
        <div class="token">#<%= screenData["id"] %></div>
      <% } %>
      <div class="token"><%= screenToken %></div>
    </section>





    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
      // sockets
      var socket = io.connect({
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax : 5000,
        reconnectionAttempts: Infinity
      });

      socket.on('screen grid', function(msg) {
        setGrid(msg);
      });

      socket.on('screen image', function(msg) {
        setImage(msg, "<%= screenToken %>", <%= (screenData) ? screenData['id'] : null %>);
      });

      socket.on('screen color', function(msg) {
        // setColor(msg, "<%= screenToken %>");
        //
        // console.log(msg);
        hitData = msg['hitData']['data'];
        setPixelColor(msg['color'], hitData); // does not set specific screen color

      });

      socket.on('screen iframe', function(msg) {
        setIframe(msg, "<%= screenToken %>", <%= (screenData) ? screenData['id'] : null %>);
      });

      socket.on('screen video', function(msg) {
        switch(msg) {
          case 'play':
            playVideo();
            break;
          case 'pause':
            pauseVideo();
            break;
          case 'rewind':
            rewindVideo();
            break;
          case 'stop':
            stopVideo();
            break;
          case 'loop':
            loopVideo();
            break;
          case 'unloop':
            unloopVideo();
          case 'showControls':
            showControls();
            break;
          case 'hideControls':
            hideControls();
            break;
          default:
            setVideo(msg, "<%= screenToken %>");
        }
      })

      socket.on('screen audio', function(msg) {
        switch(msg) {
          case 'pause':
            pauseAudio();
            break;
          case 'stop':
            stopAudio();
            break;
          default:
            setAudio(msg, "<%= screenToken %>");
        }
      });

      socket.on('screen instruction', function(msg) {
        switch(msg) {
          case 'refresh':
            location.reload();
            break;
          case 'show-token':
            $('#token-container').show();
            break;
          case 'hide-token':
            $('#token-container').hide();
            break;
          case 'mute':
            $('#render').hide();
            $('#token-container').hide();
            $('body').css('background', '#000');
            pauseAudio();
            break;
          case 'unmute':
            $('#render').show();
            $('body').css('background', '#ccc');
            playAudio();
            break;
          case 'css':
            handleCSS(msg);
            break;
          default:
            handleCSS(msg);

            // console.log('Unkown `screen instruction` command');
        }
      });

      function handleCSS(msg) {
        console.log(msg);

        if (msg["token"] == "<%= screenToken %>") {
          $('#render .offset').css("top", msg["top"]);
          $('#render .offset').css("left", msg["left"]);
          // $('#render .media').css("transform", "scale(" + msg["scale"] + ")");
        }
      }

    </script>


    <!-- gallery specific -->
    <script type="text/javascript">
      // // build pixels on page load
      // var pixelWidth = 30;
      // var pixelHeight = 15;
      // var pixelTemplate = document.getElementById('pixel-template');
      // var pixelNumber = parseInt($(window).width() / pixelWidth) * parseInt($(window).height() / pixelHeight);
      //
      // var i = 0;
      // while (i < pixelNumber) {
      //   var pixelClone = pixelTemplate.cloneNode(true);
      //   pixelClone.id = "pixel-" + i;
      //   pixelClone.style.width = pixelWidth + 'px';
      //   pixelClone.style.height = pixelHeight + 'px';
      //   document.getElementById('pixel-container').appendChild(pixelClone);
      //   i ++;
      // }

      function arrAvg(arr) {
        var total = 0;
        for(var i = 0; i < arr.length; i++) {
            total += arr[i];
        }
        return total / arr.length;
      }


      // set pixel colors
      //
      function setPixelColor(hex, hitData) {
        // // Change color
        // // -------------------
        // //
        // var redPixel = hex.replace(hex.substring(3,7), '0000');
        // var greenPixel = hex.replace(hex.substring(1,3), '00').replace(hex.substring(5,7), '00');
        // var bluePixel = hex.replace(hex.substring(1,5), '0000');
        //
        // $('.pixel .red').css('background', redPixel);
        // $('.pixel .green').css('background', greenPixel);
        // $('.pixel .blue').css('background', bluePixel);
        //
        //
        // jss.set('.pixel .red', {
        //   background: redPixel
        // })
        // jss.set('.pixel .green', {
        //   background: greenPixel
        // })
        // jss.set('.pixel .blue', {
        //   background: bluePixel
        // })

        // Change size
        // -------------------
        //
        var redValue = hex.substring(1,3);
        var greenValue = hex.substring(3,5);
        var blueValue = hex.substring(5,7);

        var depthValue = 1;
        var depthValues = [];
        var allDepthValues = [];
        var depthMultiplier = 13;

        var screenTop = <%= (screenData === undefined) ? 0 : screenData.top %>;
        var screenLeft = <%= (screenData === undefined) ? 0 : screenData.left %>;
        var screenHeight = <%= (screenData === undefined) ? 600 : screenData.height %>;
        var screenWidth = <%= (screenData === undefined) ? 600 : screenData.width %>;

        if (hitData === undefined) {
          depthValue = 1;
        } else {
          // console.log('set color');
          // console.log(hitData);
          for(index = 0; index < hitData.length; index++) {
            hitPoint = hitData[index]; // [x,y,z]

            // store all depth values
            allDepthValues.push(hitPoint[2]);

            // get depth value related to current screen
            if (
              hitPoint[0] * depthMultiplier > screenLeft &&
              hitPoint[0] * depthMultiplier < screenLeft + screenWidth &&
              hitPoint[1] * depthMultiplier > screenTop &&
              hitPoint[1] * depthMultiplier < screenTop + screenHeight
            ) {
              console.log('hit');
              depthValues.push(hitPoint[2]);
            }
          }

          // only use depth value if any depth is captured by Kinect
          if (arrAvg(allDepthValues) != 0) {
            depthValue = arrAvg(depthValues);
          }
        }

        // console.log(depthValues);
        // console.log(depthValue);
        //
        // jss.set('.pixel .red', {
        //   height: parseInt(redValue, 16) * depthValue / 255 * 100 + '%'
        // })
        // jss.set('.pixel .green', {
        //   height: parseInt(greenValue, 16) * depthValue / 255 * 100 + '%'
        // })
        // jss.set('.pixel .blue', {
        //   height: parseInt(blueValue, 16) * depthValue / 255 * 100 + '%'
        // })

        // without pixels
        redValue = parseInt(redValue, 16) * depthValue;
        greenValue = parseInt(greenValue, 16) * depthValue;
        blueValue = parseInt(blueValue, 16) * depthValue;

        // console.log(hex);
        document.body.style.backgroundColor = 'rgb(' + [redValue, greenValue, blueValue].join(',') + ')';

      }

    </script>

  </body>
</html>
