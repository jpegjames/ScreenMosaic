<!DOCTYPE html>
<html>
  <head>
    <title>ScreenTile <%= screenData === undefined ? '' : ': ' + screenData.id %></title>
    <meta name="viewport" content="<%= viewport %>" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <script src="/javascripts/jquery.min.js"></script>
    <script src="/javascripts/screen.js"></script>

    <style media="screen">
      html, body {
        margin: 0;
        height: 100%;
        width: 100%;
        font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
      }
      body {
        /* default background */
        /* background: url('https://www.toptal.com/designers/subtlepatterns/images/transp_bg.png'); */
        background: #ccc;
      }

      #render {
        height: 100%;
        width: 100%;
        overflow: hidden;
      }

      #render .media {
        position: relative;
      }

      section#token-container {
        height: 100%;
        width: 100%;
        text-align: center;
        padding-top: 200px;
        position: absolute;
        top: 0;
        left: 0;
        font-size: 30px;
        text-shadow: 2px 0 0 #fff, 0 -2px 0 #fff, 0 2px 0 #fff, -2px 0 0 #fff;
        box-sizing: border-box;
      }

      section#token-container .token {
        font-family: "Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace;
        font-size: 60px;
        font-weight: bold;
      }

      #grid {
        background-image: url("/images/grid-overlay-x.png"), url("/images/grid-overlay-y.png"), url("/images/grid-pattern.png");
        position: absolute;
        right: 0;
        bottom: 0;
        display: none;
      }

      #video {
        height: 100%;
        width: 100%;
        /* object-fit: cover; */
      }

      #iframe {
        height: 100%;
        width: 100%;
      }

      .offset {
        top: -<%= (screenData === undefined) ? 0 : screenData.top %>px;
        left: -<%= (screenData === undefined) ? 0 : screenData.left %>px;
      }
    </style>
  </head>

  <body>

    <section id="render">
      <div id="grid" class="offset"></div>

      <!-- https://webkit.org/blog/6784/new-video-policies-for-ios/ -->
      <!-- Webkit / iOS 10+: <video muted> elements will also be allowed to autoplay without a user gesture. -->
      <!-- test source: https://www.w3schools.com/html/mov_bbb.mp4 -->
      <video id="video" autoplay playsinline muted style="display: none;"></video>

      <iframe id="iframe" src="" style="display: none;"></iframe>

      <img id="image" src="" class="media offset">
    </section>


    <section id="token-container" style="<%= (screenData === undefined) ? 'display: block;' : 'display: none;' %>">
      <% if (screenData === undefined) { %>
        <div class="message">Screen not yet defined in `screens.json`</div>
      <% } else { %>
        <div class="token">#<%= screenData["id"] %></div>
      <% } %>
      <div class="token"><%= screenToken %></div>
    </section>





    <script src="/socket.io/socket.io.js"></script>
    <script type="text/javascript">
      // sockets
      var socket = io.connect({
        reconnection: true,
        reconnectionDelay: 1000,
        reconnectionDelayMax : 5000,
        reconnectionAttempts: Infinity
      });

      socket.on('screen grid', function(msg) {
        setGrid(msg);
      });

      socket.on('screen image', function(msg) {
        setImage(msg, "<%= screenToken %>", <%= (screenData) ? screenData['id'] : null %>);
      });

      socket.on('screen color', function(msg) {
        setColor(msg, "<%= screenToken %>");
      });

      socket.on('screen iframe', function(msg) {
        setIframe(msg, "<%= screenToken %>", <%= (screenData) ? screenData['id'] : null %>);
      });

      socket.on('screen video', function(msg) {
        switch(msg) {
          case 'play':
            playVideo();
            break;
          case 'pause':
            pauseVideo();
            break;
          case 'rewind':
            rewindVideo();
            break;
          case 'stop':
            stopVideo();
            break;
          case 'loop':
            loopVideo();
            break;
          case 'unloop':
            unloopVideo();
            break;
          default:
            setVideo(msg, "<%= screenToken %>");
        }
      })

      socket.on('screen audio', function(msg) {
        switch(msg) {
          case 'pause':
            pauseAudio();
            break;
          case 'stop':
            stopAudio();
            break;
          default:
            setAudio(msg, "<%= screenToken %>");
        }
      });

      socket.on('screen instruction', function(msg) {
        switch(msg) {
          case 'refresh':
            location.reload();
            break;
          case 'show-token':
            $('#token-container').show();
            break;
          case 'hide-token':
            $('#token-container').hide();
            break;
          case 'mute':
            $('#render').hide();
            $('#token-container').hide();
            $('body').css('background', '#000');
            pauseAudio();
            break;
          case 'unmute':
            $('#render').show();
            $('body').css('background', '#ccc');
            playAudio();
            break;
          case 'css':
            handleCSS(msg);
            break;
          default:
            handleCSS(msg);

            // console.log('Unkown `screen instruction` command');
        }
      });

      function handleCSS(msg) {
        console.log(msg);

        if (msg["token"] == "<%= screenToken %>") {
          $('#render .offset').css("top", msg["top"]);
          $('#render .offset').css("left", msg["left"]);
          // $('#render .media').css("transform", "scale(" + msg["scale"] + ")");
        }
      }

    </script>


  </body>
</html>
